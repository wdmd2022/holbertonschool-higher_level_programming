The ``add_integer`` module
==========================

Using ``add_integer``
---------------------

This is an example text file in reStructuredText format. First import
``add_integer`` from the ``add_integer`` module:

    >>> from 0-add_integer import add_integer

Let's start off easy and give it just a single 0 to play with:
    >>> add_integer(0)
    98

Next let's ramp up the intensity with two zeros:
    >>> add_integer(0, 0)
    0

Let's try a negative number with a positive number:
    >>> add_integer(-50, 60)
    10

Now let's try two negative numbers:
    >>> add_integer(-1, -2)
    -3

Now let's try 2 floats:
    >>> add_integer(1.5, 1.2)
    2

Now let's try a string with an integer:
    >>> add_integer("cool beans", 9)
    Traceback (most recent call last):
    TypeError: a must be an integer

Now let's try two strings:
    >>> add_integer("great", "work")
    Traceback (most recent call last):
    TypeError: a must be an integer

Now let's try having a as an int and b as a string:
    >>> add_integer(7, "bee")
    Traceback (most recent call last):
    TypeError: b must be an integer

Now let's try no input at all:
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Now let's try None for input:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Now let's try casting a string to an int for input:
    >>> add_integer("potatoes")
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'potatoes'

Now let's try inputting something that is divided by zero:
    >>> add_integer(int(5/0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Now let's try giving it too many arguments:
    >>> add_integer(5, 4, 7)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Now let's give it two arguments not separated by commas:
    >>> add_integer(i j)
    SyntaxError: invalid syntax

Now let's give it an object that's not defined:
    >>> add_integer(obj)
    Traceback (most recent call last):
    NameError: name 'obj' is not defined

Now let's do an int and a float:
    >>> add_integer(4, 4.5)
    8

Now let's add negative and positive infinity:
    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
